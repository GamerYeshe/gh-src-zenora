// Zenora Multi Tool :: Written by Aphex

// READ! - Notes - READ!
// Remember to copy the IP addresses and note passwords and other important information often because this program uses clear_screen for the menus
// Program begins under MainMenu()
// Use option 1 on different ports (0 is router as last resort), then if obtained, user or root pass or access (decline start_terminal request first if it shows), then use option 3 to auto-upload files remotely using the user/root and pass, including nmap and ScanLan.exe (user access most likely doesn't clear logs after uploading and removing the files though - permission denied)
// 

// SELF REMINDER! - Improvement Goals - SELF REMINDER!
// Integrate uploading files automatically using the result of overflow in "shell" result BEFORE start_terminal - IN PROGRESS
// Huge NMAP customization overhaul - IN PROGRESS
// Directory navigation with folder/file layout and permissions hierarchy - IN PROGRESS

main_input = null
ip_addr = null
port_num = null
opt_var = null
metaLib = null
comp = get_shell.host_computer.File("/")

ErrorMessage = function(message, ext=false) // ext == true | exit the program
	print("<color=#ff0000>Error: <color=#ffffff>" + message + "</color>")
	if ext then exit()
end function

InfoMessage = function(message)
	print("<color=#399d22>Info: <color=#ffffff>" + message + "</color>")
end function

RequestInput = function(message)
    print("<color=#ffffff>" + message + "</color>")
    input = user_input("<color=#ffffff>$> <color=#fd573a>")
	return input
end function

// include "metaxploit.so"
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then metaxploit = include_lib(current_path+"/metaxploit.so") // include from current directory if "metaxploit.so" not found in /lib
if not metaxploit then ErrorMessage("Cannot find metaxploit library in lib or current path folder.", true)

// include "crypto.so"
cryptools = include_lib("/lib/crypto.so")
if not cryptools then cryptools = include_lib(current_path + "/crypto.so") // include from current directory if "crypto.so" not found in /lib
if not cryptools then ErrorMessage("Cannot find crypto library in lib or current path folder.", true)

ClearLogs = function(shell)
	if typeof(shell) == "computer" then computer = shell else computer = shell.host_computer // if shell by chance is a host_computer
	log_file = computer.File("/var/system.log")
	// if log_file doesnt exists
	if not log_file then
		ErrorMessage("Log file does not exist at /var/system.log!")
		wait(2)
		return
	end if
	// Check permission on log_file if can read else return
	if not log_file.has_permission("r") then
		ErrorMessage("You are unauthorized to access the log file. Permission denied.")
		wait(2)
		return
	end if
	// create new "system.log" file on /root
	err_code = computer.touch("/root", "system.log")
	if err_code != 1 then
		ErrorMessage("Log file creation is unsuccessful! [" + err_code + "]")
		wait(2)
		return
	end if
	// Try to move new_log file to /var
	new_log = computer.File("/root/system.log")
	err_code = new_log.move("/var", "system.log")
	if typeof(err_code) == "string" then // if true try delete new_log
		ErrorMessage("Log file move to /var/ is unsuccessful! [" + err_code + "]")
		wait(2)
		err_code = new_log.delete
		if typeof(err_code) == "string" then
			ErrorMessage("Unable to move created system.log file! [" + err_code + "]")
			wait(2)
		end if
	end if

	InfoMessage("Log file has been cleared successfully.")
	wait(2)
	MainMenu()
end function

RemoteLocalHack = function()
    ip_input = RequestInput("Target IP: ")
    if is_valid_ip(ip_input) then
        port_input = RequestInput("Target Port: ")
		port_input = port_input.to_int
        if typeof(port_input) == "number" then
            opt_input = RequestInput("New Password / LAN IP (Optional): ")
            if opt_input then
                globals.opt_var = opt_input
            else
                globals.opt_var = null
            end if
            ip_addr = ip_input
            port_num = port_input
            net_session = metaxploit.net_use(ip_addr, port_num)
            if not net_session then
                ErrorMessage("Unable to connect to net session.")
                wait(2)
                MainMenu()
            end if
            metaLib = net_session.dump_lib
            BeginHack(metaLib)
        else
            ErrorMessage("Please enter a valid number for target port.")
			wait(2)
            MainMenu()
        end if
    else
        ErrorMessage("You have entered an invalid target IP address.")
        wait(2)
		MainMenu()
    end if
end function

UploadResult = function(file, result)
	if typeof(result) == "string" then
   		ErrorMessage("There was an issue uploading the file " + file + " [" + result + "]")
		wait(0.5)
	else
		InfoMessage("File " + file + " has been uploaded successfully.")
		wait(0.5)
	end if
end function

UploadHack = function(target_ip, target_user, target_pass)
	shell = get_shell
	remote_shell = shell.connect_service(target_ip, 22, target_user, target_pass, "ssh")
	if typeof(remote_shell) == "string" then
		is_ssh = false
		ErrorMessage("Failed to connect to remote shell via SSH. Trying FTP...")
		wait(2)
		remote_shell = shell.connect_service(target_ip, 21, target_user, target_pass, "ftp")
	end if
	if typeof(remote_shell) == "string" then
		ErrorMessage("Failed to connect to remote shell via SSH and FTP. Check credentials.")
		wait(2)
		HackManagementMenu()
	end if
	file = program_path
	result = shell.scp(program_path, "/bin/", remote_shell)
	wait(0.2)
	UploadResult(file, result)
	file = "/bin/nmap"
	result = shell.scp("/bin/nmap", "/bin/", remote_shell)
	wait(0.2)
	UploadResult(file, result)
	file = "/lib/crypto.so"
	result = shell.scp("/lib/crypto.so", "/lib/", remote_shell)
	wait(0.2)
	UploadResult(file, result)
	file = "/lib/metaxploit.so"
	result = shell.scp("/lib/metaxploit.so", "/lib/", remote_shell)
	wait(0.2)
	UploadResult(file, result)
	file = "/usr/bin/ScanLan.exe"
	result = shell.scp("/usr/bin/ScanLan.exe", "/usr/bin/", remote_shell)
	wait(0.2)
	UploadResult(file, result)
	ClearLogs(remote_shell)
	terminal_input = RequestInput("Start terminal? y/n")
	if terminal_input == "y" then
		remote_shell.start_terminal
	end if
	HackManagementMenu()
end function

RemoveResult = function(file, result)
	if result then
   		if result.has_permission("r") then
			result.delete
			InfoMessage("File " + file + " has been removed successfully.")
			wait(0.5)
		else
			ErrorMessage("You are not authorized to access file " + file + ". Permission denied.")
			wait(0.5)
		end if
	end if
end function

RemoveHack = function(target_ip, target_user, target_pass)
	shell = get_shell
	remote_shell = shell.connect_service(target_ip, 22, target_user, target_pass, "ssh")
	if typeof(remote_shell) == "string" then
		ErrorMessage("Failed to connect to remote shell via SSH. Trying FTP...")
		wait(2)
		remote_shell = shell.connect_service(target_ip, 21, target_user, target_pass, "ftp")
	end if
	if typeof(remote_shell) == "string" then
		ErrorMessage("Failed to connect to remote shell via SSH and FTP. Check credentials.")
		wait(2)
		HackManagementMenu()
	end if
	file = program_path
	result = remote_shell.host_computer.File(file)
	RemoveResult(file, result)
	file = "/bin/nmap"
	result = remote_shell.host_computer.File(file)
	RemoveResult(file, result)
	file = "/lib/crypto.so"
	result = remote_shell.host_computer.File(file)
	RemoveResult(file, result)
	file = "/lib/metaxploit.so"
	result = remote_shell.host_computer.File(file)
	RemoveResult(file, result)
	file = "/usr/bin/ScanLan.exe"
	result = remote_shell.host_computer.File(file)
	RemoveResult(file, result)
	ClearLogs(remote_shell)
	terminal_input = RequestInput("Start terminal? y/n")
	if terminal_input == "y" then
		remote_shell.start_terminal
	end if
	HackManagementMenu()
end function

HackManagementMenu = function()
	while true
		clear_screen
		print("<color=#ffffff><b>[--# <color=#f1ef31>Remote Hack File Management Menu (Zenora Tool by Aphex)<color=#ffffff> #--]</b></color>")
		print("\n")
		print("<color=#ffffff>1) <color=#fd573a>Upload Hacks</color>")
		print("<color=#ffffff>2) <color=#fd573a>Remove Hacks</color>")
		print("<color=#ffffff>3) <color=#fd573a>Main Menu</color>")
		print("<color=#ffffff>4) <color=#fd573a>Exit Program</color>")
		management_input = user_input("<color=#ffffff>$> <color=#fd573a>")
		if management_input == "1" or management_input == "2" then
			ip_input = RequestInput("Target IP: ")
			if is_valid_ip(ip_input) then
				username_input = RequestInput("Target Username")
				if username_input then
					pass_input = RequestInput("Target Password: ")
					if pass_input then
						if management_input == "1" then
							UploadHack(ip_input, username_input, pass_input)
						else
							RemoveHack(ip_input, username_input, pass_input)
						end if
					else
						ErrorMessage("You have not entered a target user password.")
						wait(2)
						continue
					end if
				else
					ErrorMessage("You have not entered a target username.")
					wait(2)
					continue
				end if
			else
				ErrorMessage("You have entered an invalid target IP address.")
				wait(2)
				continue
			end if
		else if management_input == "3" then
			MainMenu()
		else if management_input == "4" then
			exit
		else
			continue
		end if
	end while
end function

GetPassword = function(userPass)
	if userPass.len != 2 then
		ErrorMessage("Decipher failed. Wrong syntax!")
		wait(2)
		MainMenu()
	end if
	password = cryptools.decipher(userPass[1])
	return password
end function

DecipherHash = function()
	decipher_hash = RequestInput("Enter Path/Hash: ")
	if decipher_hash then
		file = get_shell.host_computer.File(decipher_hash)
		if file then
			if not file.has_permission("r") then
				ErrorMessage("You are not unauthorized to access file <b>" + decipher_hash + "</b>. Permission denied.")
				wait(2)
			end if
			if file.is_binary then
				ErrorMessage("Unable to read <b>" + decipher_hash + "</b> binary file.")
				wait(2)
			end if
			if file.get_content.len == 0 then
				ErrorMessage("File <b>" + decipher_hash + "</b> is empty.")
				wait(2)
			end if
			lines = file.get_content.split("\n")
		else if decipher_hash.len > 33 then
			lines = [decipher_hash]
		else
			ErrorMessage("Cannot find decipher input: <b>" + decipher_hash + "</b>")
			wait(2)
		end if
		for line in lines
			userPass = line.split(":")
			password = GetPassword(userPass)
			if not password then
				ErrorMessage("Password not found.")
				wait(2)
			else
				print(password)
				wait(2)
				ContinueProgram()
			end if
		end for
	else
		ErrorMessage("You must enter a decipher file or hash in format user:pass!")
		wait(2)
	end if
	MainMenu()
end function

BeginHack = function(mLib)
	pass = false
	print("<color=#f1ef31><b>-- Scan started --</b></color>")
	memories = metaxploit.scan(mLib)
	for mem_addr in memories
		vuln_strings = metaxploit.scan_address(mLib, mem_addr)
		if vuln_strings then
			vuln_string = vuln_strings.split("Unsafe check: ")
			for str in vuln_string
				if str == vuln_string[0] then continue
				if pass then continue
				exploit = str[str.indexOf("<b>")+3:str.indexOf("</b>")]
				if opt_var == null then
					result = mLib.overflow(mem_addr, exploit)
				else
					result = mLib.overflow(mem_addr, exploit, opt_var)
					if result then
						InfoMessage("New password: <b>"+opt_var+"</b>")
						wait(2)
					end if
				end if
				if not result then
					ErrorMessage("Attack unsuccessful!")
					wait(0.2)
					continue
				end if
				if typeof(result) == "shell" then
					while true
						terminal_input = RequestInput("Start terminal? y/n")
						if terminal_input == "y" then
							result.start_terminal
							exit
						else if terminal_input == "n" then
							break
						else
							continue
						end if
					end while	
				else if typeof(result) == "computer" then
					pass_file = result.File("/etc/passwd")
					if not pass_file then
						ErrorMessage("Password file does not exist.")
						wait(2)
						continue
					end if
					if pass_file != null then
						if not pass_file.has_permission("r") then
							ErrorMessage("You are unauthorized to access the password file. Permission denied.")
							wait(2)
							continue
						else
							InfoMessage("Attempting to decipher password...")
							pass_content = result.File("/etc/passwd").get_content.split("\n")
							pass = GetPassword(pass_content[0].split(":"))
							InfoMessage("Root password: <b>"+ pass +"</b>")
							wait(2)
						end if
					else
						ErrorMessage("Password file is empty.")
						wait(2)
						continue
					end if
				else if typeof(result) == "file" then
					root_dir = result
					while root_dir.path != "/"
						root_dir = root_dir.parent
					end while
					for folder in root_dir.get_folders
						if folder.name == "etc" then
							etc_dir = folder
							break
						end if
					end for
					if not etc_dir.has_permission("r") then
						ErrorMessage("You are unauthorized to access the /etc/ folder. Permission denied.")
						wait(2)
						continue
					end if
					for file in etc_dir.get_files
						if file.name == "passwd" then
							pass_file = file
							break
						end if
					end for
					if not pass_file then
						ErrorMessage("Password file does not exist.")
						wait(2)
						continue
					end if
					if pass_file != null then
						if not pass_file.has_permission("r") then
							ErrorMessage("You are unauthorized to access the password file. Permission denied.")
							wait(2)
							continue
						else
							InfoMessage("Attempting to decipher password...")
							pass_content = pass_file.get_content.split("\n")
							pass = GetPassword(pass_content[0].split(":"))
							InfoMessage("Root password: <b>"+ pass +"</b>")
							wait(2)
						end if
					else
						ErrorMessage("Password file is empty.")
						wait(2)
						continue
					end if
				else
					ErrorMessage("Unsupported object returned!")
					wait(2)
					continue	
				end if
			end for
		else
			ErrorMessage("Failed to find vulnerabilities!")
			wait(2)
		end if
	end for

	main_input = null
	ip_addr = null
	port_num = null
	metaLib = null
	comp = get_shell.host_computer.File("/")

	print("<color=#fd573a>Library: <color=#ffffff>"+mLib.lib_name+" <color=#fd573a>- Version: <color=#ffffff>"+mLib.version+"</color>")
	print("<color=#f1ef31><b>-- Scan finished --</b></color>")
	wait(2)
	ContinueProgram()
end function

ContinueProgram = function() // Continue? y = Go back to main menu - n = Quit program (y and n are case insensitive)
	while true
		continue_input = RequestInput("Continue? y/n")
		if continue_input == "y" then
			MainMenu()
		else if continue_input == "n" then
			exit
		else
			continue
		end if
	end while
end function

MainMenu = function() // MAIN MENU - FIRST MENU
	while true
		clear_screen
		print("<color=#ffffff><b>[--# <color=#f1ef31>Main Menu<color=#ffffff> #--]</b></color>")
		print("<color=#ffffff>1) <color=#fd573a>Remote & Local IP Port Hack</color>") // the optional password input isn't currently working for overflow(mem, exp, optional pass). will fix soon. nor is the local ip as the third optional param... but can hack local ip from first param with port number. Or use local library exploit in main menu
		print("<color=#ffffff>2) <color=#fd573a>Local Library Hack</color>") // enter for example init.so - it must be .so at the end
		print("<color=#ffffff>3) <color=#fd573a>Remote Hack File Management (User/Root & Password)</color>") // Also clears all logs including disconnect logs after uploading and deleting required files (this hack, nmap, metaxploit.so, crypto.so, and ScanLan.exe). NEED TO WORK ON ADDING EACH FILE PERMISSIONS BEFORE UPLOAD, THEN REMOVE AFTER UPLOAD VIA CONNECT_SERVICE
		print("<color=#ffffff>4) <color=#fd573a>Decipher Hash</color>") // File or hash decipher working
		print("<color=#ffffff>5) <color=#fd573a>Clear Logs</color>") // Clears logs of whichever computer you're accessing (Root needed obviously)
		print("<color=#ffffff>6) <color=#fd573a>Exit Program</color>")
		print("<color=#ffffff><b>[--# <color=#f1ef31>Zenora Tool v1.0 by Aphex<color=#ffffff> #--]</b></color>")
		main_input = user_input("<color=#ffffff>$> <color=#fd573a>")
		if main_input == "1" then
			RemoteLocalHack()
		else if main_input == "2" then
			host_comp = get_shell.host_computer
			local_input = RequestInput("Local Library File (ex: init.so): ")
			if local_input then
				lib_file = host_comp.File("/lib/" + lib_input)
				if lib_file then
					if not lib_file.has_permission("r") then
						ErrorMessage("You are unauthorized to access the log file. Permission denied.")
						wait(2)
						continue
					else
						metaLib = metaxploit.load("/lib/" + lib_input)
						BeginHack(metaLib)
					end if
				else
					ErrorMessage("Library file does not exist.")
					wait(2)
					continue
				end if
			else
				continue
			end if
		else if main_input == "3" then
			HackManagementMenu()
		else if main_input == "4" then
			DecipherHash()
		else if main_input == "5" then
			ClearLogs(get_shell)
		else if main_input == "6" then
			exit
		else
			continue
		end if
	end while
end function

if main_input == null then
	MainMenu()
end if
